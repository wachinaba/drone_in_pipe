<?xml version="1.0"?>
<launch>
  <!-- Posix SITL environment launch script -->
  <!-- launches PX4 SITL, Gazebo environment, and spawns vehicle -->
  <!-- vehicle pose -->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="1" />
  <arg name="R" default="0" />
  <arg name="P" default="0" />
  <arg name="Y" default="0" />
  <!-- vehicle model and world -->
  <arg name="est" default="ekf2" />
  <arg name="vehicle" default="adrien" />
  <arg name="world" default="$(find gazebo_pipe_worlds)/worlds/empty.world" />
  <arg name="sdf" default="$(find px4_gazebo_sim)/models/adrien/model.sdf" />
  <env name="PX4_SIM_MODEL" value="gazebo-classic_$(arg vehicle)" />

  <!-- gazebo configs -->
  <arg name="gui" default="true" />
  <arg name="debug" default="false" />
  <arg name="verbose" default="false" />
  <arg name="paused" default="false" />
  <arg name="respawn_gazebo" default="false" />
  <!-- MAVROS configs -->
  <arg name="fcu_url" default="udp://:14540@localhost:14557" />
  <arg name="respawn_mavros" default="false" />
  <!-- PX4 configs -->
  <arg name="interactive" default="true" />
  <!-- PX4 SITL -->
  <arg unless="$(arg interactive)" name="px4_command_arg1" value="-d" />
  <arg if="$(arg interactive)" name="px4_command_arg1" value="" />
  <node name="sitl" pkg="px4" type="px4" output="screen"
    args="$(find px4)/build/px4_sitl_default/etc -s etc/init.d-posix/rcS $(arg px4_command_arg1)"
    required="true" />

  <!-- Gazebo sim -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="verbose" value="$(arg verbose)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="respawn_gazebo" value="$(arg respawn_gazebo)" />
    <arg name="extra_gazebo_args" value="--lockstep" />
  </include>
  <!-- gazebo model -->
  <node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen"
    args="-sdf -file $(arg sdf) -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)" />
  <!-- MAVROS -->
  <include file="$(find mavros)/launch/px4.launch">
    <!-- GCS link is provided by SITL -->
    <arg name="gcs_url" value="" />
    <arg name="fcu_url" value="$(arg fcu_url)" />
    <arg name="respawn_mavros" value="$(arg respawn_mavros)" />
  </include>

  <!-- Converters -->
  <include file="$(find px4_gazebo_sim)/launch/pointcloud1_to_range_nodes.launch" />
  <include file="$(find px4_gazebo_sim)/launch/multizone_lidar_pointcloud_converters.launch" />
  <node name="gazebo_twist_converter_node" pkg="localization_in_pipe" type="p3d_odometry_converter"
    output="screen">
    <remap from="~twist" to="~actual_body_velocity" />
  </node>

  <!-- Localizer 
  <include file="$(find px4_gazebo_sim)/launch/move_ukf_nodelets.launch" />
  <node name="level_plane_tf_broadcaster" pkg="localization_in_pipe"
    type="level_plane_tf_broadcaster"
    output="screen" />
  <include file="$(find px4_gazebo_sim)/launch/localizers.launch" />
  -->

  <!-- Controllers -->
  <include file="$(find px4_gazebo_sim)/launch/tracker_controllers.launch" />

  <!-- Trackers-->
  <node pkg="autopilot_in_pipe" type="odometry_to_pose_twist.py" name="odometry_to_pose_twist">
    <remap from="/odom" to="/trackers/base_link/joint_state" />
    <remap from="/pose_stamped" to="/trackers/base_link/pose" />
    <remap from="/twist_stamped" to="/trackers/base_link/twist" />
  </node>


  <!-- state publishers and rviz -->
  <param name="robot_description" textfile="$(find px4_gazebo_sim)/urdf/adrien.urdf" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find px4_gazebo_sim)/rviz/adrien_sitl.rviz"
    required="true" />
</launch>